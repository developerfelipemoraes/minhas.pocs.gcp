using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Google.Apis.Storage.v1.Data;
using Google.Cloud.Storage.V1;
using Moq;
using Xunit;

public class GoogleCloudStorageServiceTests
{
    [Fact]
    public async Task DownloadAsBytesAsync_DeveBaixar_UsandoStorageMock_InjetadoPorReflexao()
    {
        // Arrange
        var bucket = "my-bucket";
        var objectName = "folder/file.txt";
        var bytes = Encoding.UTF8.GetBytes("hello gcs!");

        var storageMock = new Mock<StorageClient>();

        // Simula o metadata do objeto
        storageMock.Setup(s => s.GetObjectAsync(
                bucket, objectName,
                It.IsAny<GetObjectOptions>(),
                It.IsAny<CancellationToken>()))
            .ReturnsAsync(new Object { Name = objectName, ContentType = "text/plain" });

        // Simula o download escrevendo bytes no stream de destino
        storageMock.Setup(s => s.DownloadObjectAsync(
                bucket, objectName,
                It.IsAny<Stream>(),
                It.IsAny<DownloadObjectOptions>(),
                It.IsAny<CancellationToken>()))
            .Returns((string b, string n, Stream dest, DownloadObjectOptions o, CancellationToken ct) =>
            {
                dest.Write(bytes, 0, bytes.Length);
                dest.Position = 0;
                return Task.CompletedTask;
            });

        // Instancie o SUT normalmente (passe as deps reais/fakes que seu construtor exige)
        var sut = new GoogleCloudStorageService(/* ...deps... */);

        // Injeta o StorageClient mock no campo privado _storage
        InjectPrivateField(sut, "_storage", storageMock.Object);

        // Act
        var resp = await sut.DownloadAsBytesAsync(new GcsBucketInfoRequest
        {
            Bucket = bucket,
            DownloadFileName = objectName
        });

        // Assert
        Assert.NotNull(resp);
        Assert.Equal("text/plain", resp.ContentType);
        Assert.Equal(Path.GetFileName(objectName), resp.FileName);

        using var ms = new MemoryStream();
        await resp.ContentStream.CopyToAsync(ms);
        Assert.Equal(bytes, ms.ToArray());
    }

    // Helper genérico para injetar campo privado (mesmo se for readonly)
    private static void InjectPrivateField(object instance, string fieldName, object value)
    {
        var fi = instance.GetType()
            .GetField(fieldName, System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);
        Assert.NotNull(fi); // garante que o nome do campo está correto
        fi!.SetValue(instance, value);
    }
}
