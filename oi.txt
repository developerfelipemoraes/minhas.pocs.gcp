using System;
using System.Reflection;

private static object TryCreate(Type t, Func<Type, object>? fallbackFactory = null)
{
    // Structs/ValueTypes podem ser criados com Activator
    if (t.IsValueType)
        return Activator.CreateInstance(t)!;

    // Procura ctor sem parâmetros (público ou não)
    var ctor = t.GetConstructor(
        BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic,
        binder: null,
        types: Type.EmptyTypes,
        modifiers: null);

    if (ctor != null)
        return ctor.Invoke(null);

    // Sem ctor: use uma factory explícita (seguro/auditável) ou falhe claramente
    if (fallbackFactory != null)
        return fallbackFactory(t);

    throw new InvalidOperationException(
        $"{t.FullName} precisa de construtor sem parâmetros ou de uma factory de criação.");
}

private static StreamResponse BuildStreamResponse(
    byte[]? bytes = null,
    Func<Stream>? streamFactory = null,
    Func<Type, object>? factory = null)
{
    var inst = (StreamResponse)TryCreate(typeof(StreamResponse), factory);

    SetIfExists(inst, "bytes", bytes);
    SetIfExists(inst, "stream", streamFactory?.Invoke());
    SetIfExists(inst, "Location", "about:blank");
    SetIfExists(inst, "ContentType", "application/octet-stream");
    return inst;
}

// Exemplo de uso:
var resp = BuildStreamResponse(
    bytes: data,
    streamFactory: () => new MemoryStream(data),
    factory: t => new StreamResponse(/* ctor específico se existir */));
