using System;
using System.Net.Http;
using System.Security.Cryptography;
using Google.Apis.Auth.OAuth2;
using Google.Cloud.Storage.V1;
using Xunit;

// ajuste o using para o namespace da sua classe
// using CarePlus.Infra.Service.Client.GoogleCloudStorage.Configuration.Auth;

public sealed class GoogleCloudStorageAuthConfigurationTests
{
    private static GoogleCredential CreateServiceAccountGoogleCredential(string email)
    {
        using var rsa = RSA.Create(2048);
        var key = rsa.ExportParameters(true);

        var sa = new ServiceAccountCredential(
            new ServiceAccountCredential.Initializer(email)
            {
                Key = key
                // n√£o precisa de scopes para assinar URL
            });

        return GoogleCredential.FromServiceAccountCredential(sa);
    }

    [Fact]
    public void CreateUrlSigner_AssinaSemChamarGoogle_E_NaoViolaSonar()
    {
        // Arrange
        var email = "signer@test-project.iam.gserviceaccount.com";
        var cred  = CreateServiceAccountGoogleCredential(email);
        var sut   = new GoogleCloudStorageAuthConfiguration();

        // Act
        var signer = sut.CreateUrlSigner(cred); // chama UrlSigner.FromCredential(cred)
        var url = signer.Sign("bucket-de-teste", "arquivo.txt",
                              TimeSpan.FromMinutes(5), HttpMethod.Get);

        // Assert
        Assert.NotNull(signer);
        Assert.Contains("X-Goog-Algorithm=GOOG4-RSA-SHA256", url);
        Assert.Contains("X-Goog-Credential=", url);
        Assert.Contains("signer%40test-project.iam.gserviceaccount.com", url);
        Assert.Matches(@"X-Goog-Signature=[0-9a-fA-F]+", url);
    }
}
