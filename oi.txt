using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Moq;
using Xunit;

public class FileAppServiceTests
{
    private static StreamResponse MakeStreamResponse(string fileName, string contentType, byte[] bytes)
    {
        return new StreamResponse
        {
            FileName = fileName,
            ContentType = contentType,
            ContentLength = bytes.Length,
            ContentStream = new MemoryStream(bytes) // cada teste cria seu stream
        };
    }

    [Fact]
    public async Task GetFileBytesAsync_DeveRetornarBytes_DoMockDaFacade()
    {
        // Arrange
        var bucket = "my-bucket";
        var key = "docs/readme.txt";
        var payload = Encoding.UTF8.GetBytes("hello!");

        var facade = new Mock<IGoogleCloudStorageManageService>(MockBehavior.Strict);

        facade.Setup(f => f.DownloadAsBytesAsync(
                        It.Is<GcsBucketInfoRequest>(r =>
                            r.Bucket == bucket && r.DownloadFileName == key),
                        It.IsAny<CancellationToken>()))
              .ReturnsAsync(MakeStreamResponse(Path.GetFileName(key), "text/plain", payload));

        var sut = new FileAppService(facade.Object);

        // Act
        var result = await sut.GetFileBytesAsync(bucket, key);

        // Assert
        Assert.Equal(payload, result);

        // Verifica 1 chamada, com os parâmetros corretos
        facade.Verify(f => f.DownloadAsBytesAsync(
                            It.Is<GcsBucketInfoRequest>(r =>
                                r.Bucket == bucket && r.DownloadFileName == key),
                            It.IsAny<CancellationToken>()),
                      Times.Once);
    }

    [Fact]
    public async Task GetFileBytesAsync_QuandoFacadeLancar_DevePropagarOuTratar()
    {
        // Arrange
        var facade = new Mock<IGoogleCloudStorageManageService>();
        facade.Setup(f => f.DownloadAsBytesAsync(It.IsAny<GcsBucketInfoRequest>(), It.IsAny<CancellationToken>()))
              .ThrowsAsync(new InvalidOperationException("falha simulada"));

        var sut = new FileAppService(facade.Object);

        // Act + Assert (aqui estou propagando; se seu consumer “trata”, adapte o teste)
        await Assert.ThrowsAsync<InvalidOperationException>(() => sut.GetFileBytesAsync("b", "k"));
    }

    [Fact]
    public async Task GetFileBytesAsync_RespeitaCancelamento()
    {
        // Arrange
        var cts = new CancellationTokenSource();
        cts.Cancel(); // já cancelado

        var facade = new Mock<IGoogleCloudStorageManageService>(MockBehavior.Strict);

        // Se o token já está cancelado, o consumer pode nem chamar a facade
        // ou a facade pode ser chamada e lançar. Aqui assumimos que NÃO chama.
        var sut = new FileAppService(facade.Object);

        // Act + Assert
        await Assert.ThrowsAsync<TaskCanceledException>(() => sut.GetFileBytesAsync("b", "k", cts.Token));

        // Garante que não chamou a facade (ajuste se seu fluxo chamar mesmo assim)
        facade.Verify(f => f.DownloadAsBytesAsync(It.IsAny<GcsBucketInfoRequest>(), It.IsAny<CancellationToken>()),
                      Times.Never);
    }

    [Fact]
    public async Task GetFileBytesAsync_ComRetry_SucessoNaSegundaTentativa()
    {
        // Exemplo se seu consumer possui retry interno; se não tiver, ignore este teste.
        var bucket = "b";
        var key = "k";
        var payload = new byte[] { 1, 2, 3 };

        var facade = new Mock<IGoogleCloudStorageManageService>();

        facade.SetupSequence(f => f.DownloadAsBytesAsync(
                                It.Is<GcsBucketInfoRequest>(r => r.Bucket == bucket && r.DownloadFileName == key),
                                It.IsAny<CancellationToken>()))
              .ThrowsAsync(new TimeoutException("timeout 1"))
              .ReturnsAsync(MakeStreamResponse(key, "application/octet-stream", payload));

        var sut = new FileAppServiceWithRetry(facade.Object); // ver classe abaixo

        var result = await sut.GetFileBytesAsync(bucket, key);

        Assert.Equal(payload, result);
        facade.Verify(f => f.DownloadAsBytesAsync(It.IsAny<GcsBucketInfoRequest>(), It.IsAny<CancellationToken>()), Times.Exactly(2));
    }
}

// Exemplo de consumer com retry simples (apenas para ilustrar o teste acima)
public sealed class FileAppServiceWithRetry
{
    private readonly IGoogleCloudStorageManageService _gcs;
    public FileAppServiceWithRetry(IGoogleCloudStorageManageService gcs) => _gcs = gcs;

    public async Task<byte[]> GetFileBytesAsync(string bucket, string key, CancellationToken ct = default)
    {
        var req = new GcsBucketInfoRequest { Bucket = bucket, DownloadFileName = key };
        var tries = 0;

        while (true)
        {
            try
            {
                var resp = await _gcs.DownloadAsBytesAsync(req, ct);
                using var ms = new MemoryStream();
                await resp.ContentStream.CopyToAsync(ms, ct);
                return ms.ToArray();
            }
            catch when (++tries < 2) { await Task.Delay(10, ct); }
        }
    }
}
