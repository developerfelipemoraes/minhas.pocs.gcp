// Test project (.NET 8)
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Google.Apis.Storage.v1.Data;
using Google.Cloud.Storage.V1;
using Moq;
using Xunit;
using System.Runtime.CompilerServices; // <- UnsafeAccessor

public class GoogleCloudStorageServiceTests
{
    // Acesso direto ao campo privado _storage (mesmo se for readonly)
    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_storage")]
    extern static ref StorageClient GetStorageField(GoogleCloudStorageService instance);

    [Fact]
    public async Task DownloadAsBytesAsync_DeveRetornarConteudo_DoStorageMock()
    {
        // Arrange
        var bucket = "my-bucket";
        var objectName = "folder/file.txt";
        var bytes = Encoding.UTF8.GetBytes("hello gcs!");

        var storageMock = new Mock<StorageClient>();

        storageMock.Setup(s => s.GetObjectAsync(
                bucket, objectName,
                It.IsAny<GetObjectOptions>(),
                It.IsAny<CancellationToken>()))
            .ReturnsAsync(new Object { Name = objectName, ContentType = "text/plain" });

        storageMock.Setup(s => s.DownloadObjectAsync(
                bucket, objectName,
                It.IsAny<Stream>(),
                It.IsAny<DownloadObjectOptions>(),
                It.IsAny<CancellationToken>()))
            .Returns((string b, string n, Stream dest, DownloadObjectOptions o, CancellationToken ct) =>
            {
                dest.Write(bytes, 0, bytes.Length);
                dest.Position = 0;
                return Task.CompletedTask;
            });

        // Instancie seu serviço como na produção
        var sut = new GoogleCloudStorageService(/* deps reais da sua classe */);

        // Injeta o mock no campo privado _storage (sem reflection pesada, funciona com readonly)
        ref var storageRef = ref GetStorageField(sut);
        storageRef = storageMock.Object;

        // Act
        var resp = await sut.DownloadAsBytesAsync(new GcsBucketInfoRequest
        {
            Bucket = bucket,
            DownloadFileName = objectName
        });

        // Assert
        Assert.NotNull(resp);
        Assert.Equal("text/plain", resp.ContentType);
        Assert.Equal(Path.GetFileName(objectName), resp.FileName);

        using var ms = new MemoryStream();
        await resp.ContentStream.CopyToAsync(ms);
        Assert.Equal(bytes, ms.ToArray());
    }
}
